name:  RUN TESTS
# name: All Jobs Completed

on:
  # workflow_dispatch:
  #   inputs:
  #     run_job_five:
  #       description: Whether to run or not
  #       required: false
  #       default: "false"
  #       type: string
  pull_request:
  push:
    branches:
      - 'master'

env:
  RUN_JOB_FIVE: 'false'

jobs:
  display-variables:
    runs-on: ubuntu-latest
    steps:
      - name: Display variables
        run: |
          echo GITHUB_SHA: ${{ github.sha }}
          echo PROPOSED_SHA: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}

  build-docker-base-images:
    name: Build Docker Images
    uses: ./.github/workflows/workflow_run_03.yml
    with:
      sha: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}

  job-one:
    runs-on: ubuntu-latest
    steps:
      - name: Job One Step One
        run: |
          echo Run Job One Step One
  
  job-two:
    runs-on: ubuntu-latest
    steps:
      - name: Job Two Step One
        run: |
          echo Run Two One Step One

  job-three:
    runs-on: ubuntu-latest
    steps:
      - name: Job Three Step One
        run: |
          exit 0

  job-four:
    runs-on: ubuntu-latest
    steps:
      - name: Job Four Step One
        run: |
          echo Run Four One Step One

  job-five:
    if: ${{ inputs.run_job_five == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Job Five Step One
        run: |
          echo Run Five One Step One
    
  wait-for-all:
    name: All jobs completed
    runs-on: ubuntu-latest
    if: always()
    needs:
      - build-docker-base-images
      - job-one
      - job-two
      - job-three
      - job-four
      - job-five
    steps:
      - name: Export needds as JSON
        run: |
          echo "NEEDS_JSON<<EOF" >> $GITHUB_ENV
          echo '${{ toJson(needs) }}' >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Check jobs results
        shell: python
        run: |
          import json
          import os
          import sys

          try:
            needs = json.loads(os.environ["NEEDS_JSON"])
          except Exception as e:
            print("Failed to parse needs JSON.")
            raise
          
          jobs_failed = []

          for job_name, job_info in needs.items():
            result = job_info.get("result", "unknown")
            
            if result not in ("success", "skipped"):
              jobs_failed.append(job_name)

          if jobs_failed:
            print("Failing due to: {', '.join(jobs_failed)}")
            sys.exit(1)

          print("All jobs completed successfully")
