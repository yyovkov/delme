name: All Jobs Completed

on:
  workflow_dispatch:
    inputs:
      run_job_five:
        description: Whether to run or not
        required: false
        default: "false"
        type: string

env:
  RUN_JOB_FIVE: 'false'

jobs:
  job-one:
    runs-on: ubuntu-latest
    steps:
      - name: Job One Step One
        run: |
          echo Run Job One Step One
  
  job-two:
    runs-on: ubuntu-latest
    steps:
      - name: Job Two Step One
        run: |
          echo Run Two One Step One

  job-three:
    runs-on: ubuntu-latest
    steps:
      - name: Job Three Step One
        run: |
          exit 0

  job-four:
    runs-on: ubuntu-latest
    steps:
      - name: Job Four Step One
        run: |
          echo Run Four One Step One

  job-five:
    if: ${{ inputs.run_job_five == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Job Five Step One
        run: |
          echo Run Five One Step One
    
  wait-for-all:
    name: All jobs completed
    runs-on: ubuntu-latest
    if: always()
    needs:
      - job-one
      - job-two
      - job-three
      - job-four
      - job-five
    steps:
      - name: Export needds as JSON
        run: |
          echo "NEEDS_JSON<<EOF" >> $GITHUB_ENV
          echo '${{ toJson(needs) }}' >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Check jobs results
        shell: python
        run: |
          import json
          import os
          import sys

          try:
            needs = json.loads(os.environ["NEEDS_JSON"])
          except Exception as e:
            print("Failed to parse needs JSON.")
            raise
          
          jobs_failed = []

          for job_name, job_info in needs.items():
            result = job_info.get("result", "unknown")
            
            if result not in ("success", "skipped"):
              jobs_failed.append(job_name)

          if jobs_failed:
            print("Failing due to: {', '.join(jobs_failed)}")
            sys.exit(1)

          print("All jobs completed successfully")



  # wait-for-all:
  #   name: All jobs completed
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs:
  #     - job-one
  #     - job-two
  #     - job-three
  #     - job-four
  #     - job-five
  #   steps:
  #     - name: Check jobs results
  #       shell: bash
  #       run: |
  #         echo "==="
  #         echo '${{ toJson(needs) }}'
  #         echo "==="
  #         export jobs_failed=0
  #         declare -A job_results=(
  #           [job-one]="${{ needs.job-one.result }}"
  #           [job-two]="${{ needs.job-two.result }}"
  #           [job-three]="${{ needs.job-three.result }}"
  #           [job-four]="${{ needs.job-four.result }}"
  #           [job-five]="${{ needs.job-five.result }}"
  #         )

  #         # Check if there is any job in status 'failure'
  #         for job_result in ${job_results[@]}
  #         do
  #           if [[ ${job_result} == 'failure' ]]
  #           then
  #             jobs_failed=$((jobs_failed + 1))
  #           fi
  #         done

  #         echo Failed jobs: ${jobs_failed}

  #         # Fail if there is failed job
  #         if [[ ${jobs_failed} -ne 0 ]]
  #         then
  #           exit 1
  #         fi
